from tkinter import *
from tkinter.messagebox import *
import tkinter.filedialog as fd

from view.Btn import WrapButton
from view.menu import menuFrame
from view.keyInput import XYForm, Zoom
from view.CanvasField import WrapCanva
from view.CanvasPoint import CanvasPoint
from view.Settings import Settings
from view.RootWithVersions import RootWithVersions
from view.ActionsField import ActionsField

from model.SetPoints import SetPoints
from model.Tools import Tools

import controll.controllModel


def go(field):
    points = SetPoints(field.getPoints())

    field.canva.clearResult()

    rc = controll.controllModel.findLine(points)
    if rc == Tools.EXIT_FAILURE:
        return

    b, e, more, equal, less = rc
    field.canva.showLine(b, e)

    minCircleFirst = controll.controllModel.minCircle(more)
    minCircleSecond = controll.controllModel.minCircle(less)

    if minCircleFirst.r != 0:
        field.canva.showCircle(minCircleFirst.center, minCircleFirst.r, Settings.COLOR_POINT_FIRST_SET)

    if minCircleSecond.r != 0:
        field.canva.showCircle(minCircleSecond.center, minCircleSecond.r, Settings.COLOR_POINT_SECOND_SET)

    field.canva.changeColorPoints(more, Settings.COLOR_POINT_FIRST_SET)
    field.canva.changeColorPoints(equal, Settings.COLOR_LINE)
    field.canva.changeColorPoints(less, Settings.COLOR_POINT_SECOND_SET)

    field.canva.save()

    result = "Center purple circle - %s, radius - %.3f. \n" \
             "Center red circle - %s, radius - %.3f. \n\n" \
             "Square purple circle - %.3f. \n" \
             "Square red circle - %.3f. \n\n" \
             f"Unification - %.3f" % (minCircleFirst.center.likeFormatStr(), minCircleFirst.r,
                                       minCircleSecond.center.likeFormatStr(), minCircleSecond.r,
                                       controll.controllModel.Square(minCircleFirst),
                                       controll.controllModel.Square(minCircleSecond),
                                       controll.controllModel.findArea(minCircleFirst.r, minCircleSecond.r, minCircleFirst.center, minCircleSecond.center))

    # showinfo("Result", f"Center purple circle - {minCircleFirst.center.likeStr()}, radius - {minCircleFirst.r}. \n"
    #                    f"Center red circle - {minCircleSecond.center.likeStr()}, radius - {minCircleSecond.r}. \n\n"
    #                    f"Square purple circle - {controll.controllModel.Square(minCircleFirst)}. \n"
    #                    f"Square red circle - {controll.controllModel.Square(minCircleSecond)}. \n\n"
    #                    f"Intersection - {controll.controllModel.findArea(minCircleFirst.r, minCircleSecond.r, minCircleFirst.center, minCircleSecond.center)}")

    showinfo("Result", result)


def addPointKey(canva, XYform):
    x, y = XYform.getXY()
    if not Tools.isFloat(x) or not Tools.isFloat(y):
        showinfo('Error', '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)')
        return

    canva.canva.showPoint(float(x), float(y))
    XYform.clear()

    canva.canva.save()


def delPointKey(canva, XYform):
    x, y = XYform.getXY()
    print(x, y)
    if not Tools.isFloat(x) or not Tools.isFloat(y):
        showinfo('Error', '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)')
        return

    delPoint = CanvasPoint(float(x), float(y))
    flagWasPoint = False
    for point in canva.getPoints():
        if point.isPointsEqual(delPoint, point):
            point.hide(canva.canva)
            XYform.clear()
            flagWasPoint = True

    if not flagWasPoint:
        showinfo('Warning', '–¢–æ—á–∫–∏ —Å —Ç–∞–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return

    canva.canva.save()


def inputPointsFromFile(canva):
    filetypes = (("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", "*.txt"), ("Excel", "*.xlsx"))
    filename = fd.askopenfilename(title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", initialdir=Settings.DIR_INPUT_POINTS,
                                  filetypes=filetypes, multiple=False)

    coords = []
    if filename and filename[-4::] == '.txt':
        coords = controll.controllModel.inputPointsTXT(filename)
        if Tools.isFloat(coords):
            showinfo('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞' if coords == Tools.INVALID_FILENAME else '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö',
                     '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞' if coords == -1 else f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ {coords} —Å—Ç—Ä–æ–∫–µ. \n\n'
                              '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ –≤–≤–µ–¥–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ x ; y –∏ —á—Ç–æ –∫–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ '
                              '–Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ')
            return

    elif filename and filename[-5::] == '.xlsx':
        coords = controll.controllModel.inputPointsXLSX(filename)
        if Tools.isInt(coords):
            if coords == Tools.INVALID_FILENAME:
                showinfo('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞', '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞')
            elif coords == Tools.INVALID_LISTNAME:
                showinfo('–û—à–∏–±–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º Points')
            elif coords == Tools.INVALID_HEAD:
                showinfo('–û—à–∏–±–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è X –∏ Y')
            elif coords == Tools.INVALID_DATA:
                showinfo('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö-—Å–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º y-–∫–æ–≤')
            elif coords == Tools.INVALID_FORMAT_DATA:
                showinfo('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', '–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–µ—Ä–Ω—ã–π (–æ–∂–∏–¥–∞–ª–∏—Å—å –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞)')
            else:
                showinfo('Error', '–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º')
            return
    elif filename:
        showinfo('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞', '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞')
        return
    else:
        return

    if coords == []:
        showinfo('Empty file', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö, —Ç–æ—á–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
        return

    canva.canva.clear()
    for c in coords:
        canva.canva.showPoint(c[0], c[1])

    canva.canva.save()


def savePointsToFile(canva):
    new_file = fd.asksaveasfile(title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª", defaultextension=".txt",
                                filetypes=(("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", "*.txt"), ))
    if new_file:
        for point in canva.getPoints():
            new_file.write(point.likeStr() + '\n')
        new_file.close()


def clearCanva(canva):
    canva.clear()
    canva.canva.save()


class UpButtons:
    def __init__(self, root, c):
        self.root = root
        self.canva = c
        self.f = Frame(self.root, width=400, height=60)
        self.f['bg'] = Settings.COLOR_MAIN_BG

        self.bClear = WrapButton(self.f, txt='üóë', command=lambda: clearCanva(self.canva), name='clear all')
        self.bGo = WrapButton(self.f, txt='üöÄ', command=lambda: go(self.canva), name='make calc')
        self.bInput = WrapButton(self.f, txt='üìÇ', command=lambda: inputPointsFromFile(self.canva), name='take points from file')
        self.bSave = WrapButton(self.f, txt='üìã', command=lambda: savePointsToFile(self.canva), name='save points')
        self.bReturn = WrapButton(self.f, txt='‚èé', command=lambda: root.loadVersion(), name='cancel')

    def show(self, posx=Settings.X_CANVA, posy=Settings.Y_INPUT + 9):
        startX, startY = 0, 0
        self.bReturn.show(posx=startX, posy=startY)
        self.bInput.show(posx=startX + 1 * Settings.BTN_STEP, posy=startY)
        self.bSave.show(posx=startX + 2 * Settings.BTN_STEP, posy=startY)
        self.bClear.show(posx=startX + 3 * Settings.BTN_STEP, posy=startY)
        self.bGo.show(posx=startX + 4 * Settings.BTN_STEP, posy=startY)

        self.f.place(x=posx, y=posy)