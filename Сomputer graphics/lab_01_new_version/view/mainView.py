from tkinter import *
from tkinter.messagebox import *
import tkinter.filedialog as fd

from view.CanvasField import WrapCanva
from view.Btn import WrapButton
from view.menu import menuFrame
from view.keyInput import XYForm, Zoom
from view.CanvasField import WrapCanva
from view.CanvasPoint import CanvasPoint
from view.Settings import Settings
from view.RootWithVersions import RootWithVersions

from model.SetPoints import SetPoints
from model.Tools import Tools

import controll.controllModel


def go(field):
    points = SetPoints(field.getPoints())

    field.canva.clearResult()

    rc = controll.controllModel.findLine(points)
    if rc == Tools.EXIT_FAILURE:
        return

    b, e, more, equal, less = rc
    b.print()
    e.print()
    field.canva.showLine(b, e)

    minCircleFirst = controll.controllModel.minCircle(more)
    minCircleSecond = controll.controllModel.minCircle(less)

    if minCircleFirst.r != 0:
        field.canva.showCircle(minCircleFirst.center, minCircleFirst.r, Settings.COLOR_POINT_FIRST_SET)

    if minCircleSecond.r != 0:
        field.canva.showCircle(minCircleSecond.center, minCircleSecond.r, Settings.COLOR_POINT_SECOND_SET)

    field.canva.changeColorPoints(more, Settings.COLOR_POINT_FIRST_SET)
    field.canva.changeColorPoints(equal, Settings.COLOR_LINE)
    field.canva.changeColorPoints(less, Settings.COLOR_POINT_SECOND_SET)

    field.canva.save()


def addPointKey(canva, XYform):
    x, y = XYform.getXY()
    if not Tools.isInt(x) or not Tools.isInt(y):
        showinfo('Error', '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)')
        return

    canva.canva.showPoint(int(x), int(y))
    XYform.clear()

    canva.canva.save()


def delPointKey(canva, XYform):
    x, y = XYform.getXY()
    print(x, y)
    if not Tools.isInt(x) or not Tools.isInt(y):
        showinfo('Error', '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)')
        return

    delPoint = CanvasPoint(int(x), int(y))
    flagWasPoint = False
    for point in canva.getPoints():
        if point.isPointsEqual(delPoint, point):
            point.hide(canva.canva)
            XYform.clear()
            flagWasPoint = True

    if not flagWasPoint:
        showinfo('Warning', '–¢–æ—á–∫–∏ —Å —Ç–∞–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return

    canva.canva.save()


def inputPointsFromFile(canva):
    filetypes = (("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", "*.txt"), ("Excel", "*.xlsx"))
    filename = fd.askopenfilename(title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", initialdir=Settings.DIR_INPUT_POINTS,
                                  filetypes=filetypes, multiple=False)
    if filename and filename[-4::] == '.txt':
        coords = controll.controllModel.inputPointsTXT(filename)
        if Tools.isInt(coords):
            showinfo('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞' if coords == Tools.INVALID_FILENAME else '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö',
                     '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞' if coords == -1 else f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ {coords} —Å—Ç—Ä–æ–∫–µ. \n\n'
                              '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ –≤–≤–µ–¥–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ x ; y –∏ —á—Ç–æ –∫–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ '
                              '–Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ')
            return

    elif filename and filename[-5::] == '.xlsx':
        coords = controll.controllModel.inputPointsXLSX(filename)
        if Tools.isInt(coords):
            if coords == Tools.INVALID_FILENAME:
                showinfo('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞', '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞')
            elif coords == Tools.INVALID_LISTNAME:
                showinfo('–û—à–∏–±–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º Points')
            elif coords == Tools.INVALID_HEAD:
                showinfo('–û—à–∏–±–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è X –∏ Y')
            elif coords == Tools.INVALID_DATA:
                showinfo('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö-—Å–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º y-–∫–æ–≤')
            elif coords == Tools.INVALID_FORMAT_DATA:
                showinfo('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', '–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–µ—Ä–Ω—ã–π (–æ–∂–∏–¥–∞–ª–∏—Å—å –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞)')
            else:
                showinfo('Error', '–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º')
            return
    else:
        showinfo('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞', '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞')
        return

    if coords == []:
        showinfo('Empty file', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö, —Ç–æ—á–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
        return

    canva.canva.clear()
    for c in coords:
        canva.canva.showPoint(c[0], c[1])

    canva.canva.save()


def savePointsToFile(canva):
    new_file = fd.asksaveasfile(title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª", defaultextension=".txt",
                                filetypes=(("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", "*.txt"), ))
    if new_file:
        for point in canva.getPoints():
            new_file.write(point.likeStr() + '\n')
        new_file.close()


def clearCanva(canva):
    canva.clear()
    canva.canva.save()


def zoom(root, canva):
    z = Zoom(root, canva)
    z.show()


# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç axis –∫–∞–∫ –æ—Å—å (—Ç.–µ. 'X' –∏–ª–∏ 'Y'), side –∫–∞–∫ —Å—Ç–æ—Ä–æ–Ω—É, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
# side = 'left' –∏–ª–∏ 'right' –¥–ª—è X, 'up' –∏–ª–∏ 'down' –¥–ª—è Y
def arrowMoveAcrossField(canva, axis, side):
    if axis == 'X':
        step = abs(canva.canva.XStart - canva.canva.XEnd) / canva.canva.gridCoef / 2
        canva.canva.changeLimits(canva.canva.XStart + (step if side == 'right' else -step),
                                 canva.canva.XEnd + (step if side == 'right' else -step),
                                 canva.canva.YStart, canva.canva.YEnd)
    else:
        step = abs(canva.canva.YStart - canva.canva.YEnd) / canva.canva.gridCoef / 2
        canva.canva.changeLimits(canva.canva.XStart, canva.canva.XEnd,
                                 canva.canva.YStart + (step if side == 'up' else -step),
                                 canva.canva.YEnd + (step if side == 'up' else -step))


def plug():
    print('plug')

def mainView():
    root = RootWithVersions()
    root.geometry('850x650')
    root['bg'] = Settings.COLOR_MAIN_BG

    root.iconphoto(True, PhotoImage(file=r'C:\projects\–°omputational algorithms\lab_01_new_version\shared\rootIcon.png'))
    root.title('–£ –º–µ–Ω—è –ª–∞–ø–∫–∏')

    menu = menuFrame(root)
    root.config(menu=menu.create())

    c = WrapCanva(root, bg='white', highlightthickness=0)
    root.setSaveObjs(c)
    b = WrapButton(root, txt='üóë', command=lambda: clearCanva(c))
    bcn = WrapButton(root, txt='üöÄ', command=lambda: go(c))
    binput = WrapButton(root, txt='üìÇ', command=lambda: inputPointsFromFile(c))
    boutput = WrapButton(root, txt='üìã', command=lambda: savePointsToFile(c))
    breturn = WrapButton(root, txt='‚èé', command=lambda: root.loadVersion())
    bzoom = WrapButton(root, txt='üîé', padx=10, pady=8, command=lambda: zoom(root, c))

    bleft = WrapButton(root, txt='‚¨Ö', padx=10, pady=8, command=lambda: arrowMoveAcrossField(c, 'X', 'left'))
    bright = WrapButton(root, txt='‚û°', padx=10, pady=8, command=lambda: arrowMoveAcrossField(c, 'X', 'right'))
    bup = WrapButton(root, txt='‚¨Ü', padx=14, pady=8, command=lambda: arrowMoveAcrossField(c, 'Y', 'up'))
    bdown = WrapButton(root, txt='‚¨á', padx=14, pady=8, command=lambda: arrowMoveAcrossField(c, 'Y', 'down'))


    c.show(Settings.X_CANVA, Settings.Y_CANVA, Settings.REL_X_CANVA, Settings.REL_Y_CANVA)
    breturn.show(posx=Settings.X_CANVA, posy=Settings.Y_START_BUTTONS)
    binput.show(posx=Settings.X_CANVA + 1 * Settings.BTN_STEP, posy=Settings.Y_START_BUTTONS)
    boutput.show(posx=Settings.X_CANVA + 2 * Settings.BTN_STEP, posy=Settings.Y_START_BUTTONS)
    b.show(posx=Settings.X_CANVA + 3 * Settings.BTN_STEP, posy=Settings.Y_START_BUTTONS)
    bcn.show(posx=Settings.X_CANVA + 4 * Settings.BTN_STEP, posy=Settings.Y_START_BUTTONS)

    bleft.show(posx=Settings.X_INPUT - 6, posy=Settings.Y_INPUT + 3 * Settings.STEP_INPUT)
    bzoom.show(posx=3.8 * Settings.X_INPUT - 6, posy=Settings.Y_INPUT + 3 * Settings.STEP_INPUT)
    bright.show(posx=6.6*Settings.X_INPUT - 6, posy=Settings.Y_INPUT + 3 * Settings.STEP_INPUT)

    bup.show(posx=3.8 * Settings.X_INPUT - 6, posy=Settings.Y_INPUT + 2.62 * Settings.STEP_INPUT)
    bdown.show(posx=3.8 * Settings.X_INPUT - 6, posy=Settings.Y_INPUT + 3.38 * Settings.STEP_INPUT)

    addXYForm = XYForm(root, Settings.COLOR_MAIN_BG, 'Add point', Settings.WIDTH_INPUT,
                       lambda: addPointKey(c, addXYForm), '  Add  ')
    delXYForm = XYForm(root, Settings.COLOR_MAIN_BG, 'Del point', Settings.WIDTH_INPUT,
                       lambda: delPointKey(c, delXYForm), '  Del  ')

    addXYForm.show(Settings.COLOR_MAIN_BG, Settings.X_INPUT, Settings.Y_INPUT)
    delXYForm.show(Settings.COLOR_MAIN_BG, Settings.X_INPUT, Settings.Y_INPUT + Settings.STEP_INPUT)

    root.mainloop()